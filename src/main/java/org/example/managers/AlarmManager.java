package org.example.managers;

import org.example.models.Alarm;

import java.time.LocalDateTime;
import java.util.*;
import java.util.concurrent.atomic.AtomicLong;
import java.util.stream.Collectors;

public class AlarmManager {
    private List<Alarm> alarms;
    private AtomicLong idCounter;
    private Timer alarmTimer;
    private boolean autoSave;

    public AlarmManager() {
        this.alarms = new ArrayList<>();
        this.idCounter = new AtomicLong(1);
        this.autoSave = true;
    }

    public Alarm setAlarm(String message, LocalDateTime alarmTime) {
        Alarm alarm = new Alarm(idCounter.getAndIncrement(), message, alarmTime);
        alarms.add(alarm);
//        if (autoSave) autoSave();
//        ConsoleHelper.printSuccess("–ë—É–¥–∏–ª—å–Ω–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: " + alarm.getFormattedAlarmTime());
        return alarm;
    }

    public Alarm setAlarm(String message, LocalDateTime alarmTime, boolean isRecurring) {
        Alarm alarm = new Alarm(idCounter.getAndIncrement(), message, alarmTime, isRecurring);
        alarms.add(alarm);
//        if (autoSave) autoSave();
//        ConsoleHelper.printSuccess("–ë—É–¥–∏–ª—å–Ω–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: " + alarm.getFormattedAlarmTime() +
//                (isRecurring ? " (–ø–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è)" : ""));
        return alarm;
    }

    public Alarm setQuickAlarm(String message, String timeString) {
        Alarm alarm = new Alarm(idCounter.getAndIncrement(), message, timeString);
        alarms.add(alarm);
//        if (autoSave) autoSave();
//        ConsoleHelper.printSuccess("–ë—É–¥–∏–ª—å–Ω–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞: " + timeString);
        return alarm;
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –±—É–¥–∏–ª—å–Ω–∏–∫–∞ –ø–æ ID
     */
    public boolean removeAlarm(Long alarmId) {
        boolean removed = alarms.removeIf(alarm -> alarm.getId().equals(alarmId));
        if (removed) {
//            if (autoSave) autoSave();
//            ConsoleHelper.printSuccess("–ë—É–¥–∏–ª—å–Ω–∏–∫ #" + alarmId + " —É–¥–∞–ª–µ–Ω");
        } else {
//            ConsoleHelper.printError("–ë—É–¥–∏–ª—å–Ω–∏–∫ #" + alarmId + " –Ω–µ –Ω–∞–π–¥–µ–Ω");
        }
        return removed;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –±—É–¥–∏–ª—å–Ω–∏–∫–∞ –ø–æ ID
     */
    public Alarm getAlarmById(Long alarmId) {
        return alarms.stream()
                .filter(alarm -> alarm.getId().equals(alarmId))
                .findFirst()
                .orElse(null);
    }

    /**
     * –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±—É–¥–∏–ª—å–Ω–∏–∫
     */
    public boolean activateAlarm(Long alarmId) {
        Alarm alarm = getAlarmById(alarmId);
        if (alarm != null) {
            alarm.activate();
//            if (autoSave) autoSave();
//            ConsoleHelper.printSuccess("–ë—É–¥–∏–ª—å–Ω–∏–∫ #" + alarmId + " –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω");
            return true;
        }
        return false;
    }

    /**
     * –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±—É–¥–∏–ª—å–Ω–∏–∫
     */
    public boolean deactivateAlarm(Long alarmId) {
        Alarm alarm = getAlarmById(alarmId);
        if (alarm != null) {
            alarm.deactivate();
//            if (autoSave) autoSave();
//            ConsoleHelper.printSuccess("–ë—É–¥–∏–ª—å–Ω–∏–∫ #" + alarmId + " –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω");
            return true;
        }
        return false;
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±—É–¥–∏–ª—å–Ω–∏–∫–∞
     */
    public boolean toggleAlarm(Long alarmId) {
        Alarm alarm = getAlarmById(alarmId);
        if (alarm != null) {
            alarm.toggle();
//            if (autoSave) autoSave();
            String status = alarm.isActive() ? "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" : "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω";
//            ConsoleHelper.printSuccess("–ë—É–¥–∏–ª—å–Ω–∏–∫ #" + alarmId + " " + status);
            return true;
        }
        return false;
    }

    /**
     * –û—Ç–ª–æ–∂–∏—Ç—å –±—É–¥–∏–ª—å–Ω–∏–∫
     */
    public boolean snoozeAlarm(Long alarmId, int minutes) {
        Alarm alarm = getAlarmById(alarmId);
        if (alarm != null && alarm.isActive()) {
            alarm.snooze(minutes);
//            if (autoSave) autoSave();
//            ConsoleHelper.printSuccess("–ë—É–¥–∏–ª—å–Ω–∏–∫ #" + alarmId + " –æ—Ç–ª–æ–∂–µ–Ω –Ω–∞ " + minutes + " –º–∏–Ω—É—Ç");
            return true;
        }
        return false;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –±—É–¥–∏–ª—å–Ω–∏–∫–∏
     */
    public List<Alarm> getAllAlarms() {
        return new ArrayList<>(alarms);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –±—É–¥–∏–ª—å–Ω–∏–∫–∏
     */
    public List<Alarm> getActiveAlarms() {
        return alarms.stream()
                .filter(Alarm::isActive)
                .collect(Collectors.toList());
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –±—É–¥–∏–ª—å–Ω–∏–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
     */
    public List<Alarm> getTodayAlarms() {
        return alarms.stream()
                .filter(alarm -> alarm.isActive() && alarm.isToday())
                .collect(Collectors.toList());
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ –±—É–¥–∏–ª—å–Ω–∏–∫–∏
     */
    public List<Alarm> getUpcomingAlarms() {
        return alarms.stream()
                .filter(Alarm::isActive)
                .sorted(Comparator.comparing(Alarm::getAlarmTime))
                .limit(5)
                .collect(Collectors.toList());
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –±—É–¥–∏–ª—å–Ω–∏–∫–∏
     */
    public List<Alarm> getRecurringAlarms() {
        return alarms.stream()
                .filter(Alarm::isRecurring)
                .collect(Collectors.toList());
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –±—É–¥–∏–ª—å–Ω–∏–∫–∏
     */
    public List<Alarm> getExpiredAlarms() {
        return alarms.stream()
                .filter(Alarm::isExpired)
                .collect(Collectors.toList());
    }

    /**
     * –ü–æ–∏—Å–∫ –±—É–¥–∏–ª—å–Ω–∏–∫–æ–≤ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—é
     */
    public List<Alarm> searchAlarmsByMessage(String keyword) {
        String lowerKeyword = keyword.toLowerCase();
        return alarms.stream()
                .filter(alarm -> alarm.getMessage().toLowerCase().contains(lowerKeyword))
                .collect(Collectors.toList());
    }

    /**
     * –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±—É–¥–∏–ª—å–Ω–∏–∫–æ–≤
     */
    private void startAlarmChecker() {
        alarmTimer = new Timer("AlarmChecker", true);
        alarmTimer.scheduleAtFixedRate(new TimerTask() {
            @Override
            public void run() {
                checkAlarms();
            }
        }, 0, 30000); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ä–∞–±–æ—Ç–∞–≤—à–µ–≥–æ –±—É–¥–∏–ª—å–Ω–∏–∫–∞
     */
    private void triggerAlarm(Alarm alarm) {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–≤—É–∫–æ–≤–æ–π —Å–∏–≥–Ω–∞–ª
//        ConsoleHelper.printMessage("\nüö®üö®üö® –ë–£–î–ò–õ–¨–ù–ò–ö –°–†–ê–ë–û–¢–ê–õ! üö®üö®üö®");
//        ConsoleHelper.printMessage("üì¢ " + alarm.getMessage());
//        ConsoleHelper.printMessage("‚è∞ –í—Ä–µ–º—è: " + alarm.getFormattedAlarmTime());

        alarm.trigger();
//        if (autoSave) autoSave();

        // –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –æ—Ç–ª–æ–∂–∏—Ç—å
        if (alarm.isActive() && !alarm.isRecurring()) {
//            ConsoleHelper.printMessage("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –æ—Ç–∫–ª–∞–¥—ã–≤–∞–Ω–∏—è –Ω–∞ 5 –º–∏–Ω—É—Ç...");
            new Scanner(System.in).nextLine();
            snoozeAlarm(alarm.getId(), 5);
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–∞–±–æ—Ç–∞–≤—à–∏—Ö –±—É–¥–∏–ª—å–Ω–∏–∫–æ–≤
     */
    private void checkAlarms() {
        for (Alarm alarm : getActiveAlarms()) {
            if (alarm.shouldTrigger()) {
                triggerAlarm(alarm);
            }
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –±—É–¥–∏–ª—å–Ω–∏–∫–æ–≤
     */
    public void clearAllAlarms() {
//        if (ConsoleHelper.confirmAction("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –±—É–¥–∏–ª—å–Ω–∏–∫–∏?")) {
            alarms.clear();
            idCounter.set(1);
//            if (autoSave) autoSave();
//            ConsoleHelper.printSuccess("–í—Å–µ –±—É–¥–∏–ª—å–Ω–∏–∫–∏ —É–¥–∞–ª–µ–Ω—ã");
        }

    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±—É–¥–∏–ª—å–Ω–∏–∫–æ–≤
     */
    public void shutdown() {
        if (this.alarmTimer != null) {
            alarmTimer.cancel();
        }
//        ConsoleHelper.printInfo("–ú–µ–Ω–µ–¥–∂–µ—Ä –±—É–¥–∏–ª—å–Ω–∏–∫–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
     */
    public void setAutoSave(boolean autoSave) {
        this.autoSave = autoSave;
//        ConsoleHelper.printInfo("–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: " + (autoSave ? "–≤–∫–ª—é—á–µ–Ω–æ" : "–≤—ã–∫–ª—é—á–µ–Ω–æ"));
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É–¥–∏–ª—å–Ω–∏–∫–æ–≤
     */
    public int getAlarmCount() {
        return alarms.size();
    }
}